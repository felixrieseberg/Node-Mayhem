doctype 5
html
  head
    title Node Mayham 
    link(rel='stylesheet' href='/css/game.css')

    meta(id='viewport', name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=yes')
    meta(name='apple-mobile-web-app-capable', content='yes')
    meta(name='apple-mobile-web-app-status-bar-style', content='black')

    script(src='lib/melonJS-0.9.10.js')
    script(src='lib/plugins/debugPanel.js')
    script(src='js/mp.js')
    script(src='js/audio.js')
    script(src='js/game.js')
    script(src='js/resources.js')
    script(src='js/entities/entities.js')
    script(src='js/entities/bulletEntity.js')
    script(src='js/entities/extraEntities.js')
    script(src='js/entities/HUD.js')
    script(src='js/screens/title.js')
    script(src='js/screens/play.js')
    script(src='/socket.io/socket.io.js')

  body
    script.
      function createUUID() {
        // http://www.ietf.org/rfc/rfc4122.txt
        var s = [];
        var hexDigits = "0123456789abcdef";
        for (var i = 0; i < 36; i++) {
            s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
        }
        s[14] = "4";  // bits 12-15 of the time_hi_and_version field to 0010
        s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);  // bits 6-7 of the clock_seq_hi_and_reserved to 01
        s[8] = s[13] = s[18] = s[23] = "-";

        var uuid = s.join("");
        return uuid;
      }

      function createCookie(name,value,days) {
        if (days) {
          var date = new Date();
          date.setTime(date.getTime()+(days*24*60*60*1000));
          var expires = "; expires="+date.toGMTString();
        }
        else var expires = "";
        document.cookie = name+"="+value+expires+"; path=/";
      }

      function readCookie(name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(';');
        for(var i=0;i < ca.length;i++) {
          var c = ca[i];
          while (c.charAt(0)==' ') c = c.substring(1,c.length);
          if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
        }
        return null;
      }

      function eraseCookie(name) {
        createCookie(name,"",-1);
      }

      var sessionId = readCookie('sessionId');
      if(!sessionId) {
        sessionId = createUUID();
        createCookie('sessionId', sessionId, 100);
      }

      window.onReady(function onReady() {
        var socket = io.connect();
        game.socket = socket;
        game.gameReady = function() {
          socket.emit('gameReady', { id: sessionId, name: 'joe bob' });
        }

        game.onload();

        if (me.device.isMobile && !navigator.isCocoonJS) {
          window.document.addEventListener("touchmove", function (e) {
            e.preventDefault();
            window.scroll(0, 0);
            return false;
          }, false);

          (function () {
            window.scrollTo(0, 1);
            me.video.onresize(null);
          }).defer();

          me.event.subscribe(me.event.WINDOW_ONRESIZE, function (e) {
            window.scrollTo(0, 1);
          });
        }

        socket.on('playerId', function(playerId) {
          game.playerId = playerId;
        });
        
        socket.on('addPlayer', function (data) {
          game.addEnemy(data);
        });
        
        socket.on('addMainPlayer', function (data) {
          game.addMainPlayer(data);
        });

        socket.on('removePlayer', function (id) {
          if(game.playerId == id) {
            window.location = '/';
          }
          game.removeEnemy({ id: id });
        });

        socket.on('addPlayers', function(players) {
          for(var id in players) {
            game.addEnemy(players[id]);
          }
        });
        
        socket.on('updatePlayerState', function(data) {
          game.updatePlayerState(data);
        });

        socket.on('score', function(score) {
          game.data.score = score;
        });

        socket.on('playerScore', function(data) {
          game.updatePlayerScore(data);
        });

        socket.on('remotePlayerHit', function(data) {
          game.remotePlayerHealthChanged(data);
        });

        socket.on('remotePlayerHealed', function(data) {
          game.remotePlayerHealthChanged(data);
        });

        socket.on('fireBullet', function(id, source, target) {
          console.log('REMOTE FIRE', id);
          game.fireBullet(source, target, id);
        });
      });

      var audioOn = true;
      function switchSound() {
        if (audioOn == true) {
            me.audio.muteAll()
            document.getElementById("soundSwitch").text = "Enable Sound";
        } else {
            me.audio.unmuteAll()
        }
      }
    div(class="wrapper")
        div(id="screen")
            div#settings
                a#musicSwitch(href="#", onclick="audioManager.switchMusic()")="DISABLE MUSIC"
                a#soundSwitch(href="#", onclick="audioManager.switchMute()")="DISABLE ALL SOUND"
                br
    footer
        h3="This game has been made for Node Knockout 2013 by Timothy Strimple, Helen Zeng & Felix Rieseberg"
        small="Credits: Music (CC) by Wizwards, sound effects (CC) by timgormly"
    
        
